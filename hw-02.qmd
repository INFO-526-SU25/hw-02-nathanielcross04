---
title: "HW 02"
subtitle: "INFO 526: Summer 2025"
author: "Nathaniel Cross"
date: 2025-06-02
format: 
  html:
    embed-resources: true
toc: true
execute:
  warning: false
  message: false
  error: false
---

## 0 - Setup

```{r setup}

# install and load packages
if(!require(pacman))
  install.packages("pacman")

pacman::p_load(tidyverse, 
               glue,
               scales,
               countdown,
               ggthemes,
               gt,
               palmerpenguins,
               openintro,
               ggrepel,
               patchwork,
               quantreg,
               janitor,
               colorspace,
               broom,
               fs,
               here,
               openintro,
               gghighlight,
               lubridate,
               dsbox,
               ggridges,
               gtable
               )

devtools::install_github("tidyverse/dsbox")

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)
```

## 1 - A new day, a new plot, a new geom

```{r q1}

# loading the data
edibnb <- edibnb |>
  glimpse()

# wrangling
tapply(edibnb$review_scores_rating, edibnb$neighbourhood, summary) # Source: BenBarnes (StackOverflow)

edibnb_wrangle <- edibnb |>
  mutate(
  neighbourhood = fct_relevel(neighbourhood, "Morningside", "Bruntsfield", "Stockbridge", "Cannonmills", "New Town", "Leith", "Marchmont", "West End", "Haymarket", "Old Town", "Newington", "Tollcross", "Southside")
)

# plot
edibnb_wrangle |>
  filter(!is.na(neighbourhood)) |>
  ggplot(aes(x = review_scores_rating, y = neighbourhood)) +
  geom_density_ridges(scale = 1.5, fill = "deepskyblue3") + 
  labs(
    x = "Rating",
    y = NULL,
    title = "Ratings of Edinburgh Airbnbs",
    subtitle = "By neighborhood"
  ) +
  coord_cartesian(clip = "off") +
  theme(
    plot.title.position = "plot"
  ) +
  theme_ridges()
```

In interpreting this plot, one finds that most Airbnbs in Edinburgh are rated similarly, with high scores given to almost all properties. Ranked in order of descending median, we can interpret that certain neighborhoods like Bruntsfield and Morningside do receive higher ratings (median = 98), however variation between the best- and worst-ranked neighborhoods is minimal. Unfortunately, given the relative closeness of this data, a plot may not be the best tool to examine nuance in the dataset and a more traditional statistical summary might prove more useful.

## 2 - Foreign Connected PACs

```{r q2 data wrangling}

# get a list of files with "Foreign Connected PAC" in their names
list_of_files <- dir_ls(path = "data", regexp = "Foreign Connected PAC")

# read all files and row bind them
# keeping track of the file name in a new column called year
pac <- read_csv(list_of_files, id = "year")

# cleaning var names
pac <- pac |>
  janitor::clean_names()

# replace year obs with single year
pac$year[pac$year== "data/Foreign Connected PACs, 1999-2000.csv"] = "2000"
pac$year[pac$year== "data/Foreign Connected PACs, 2001-2002.csv"] = "2002"
pac$year[pac$year== "data/Foreign Connected PACs, 2003-2004.csv"] = "2004"
pac$year[pac$year== "data/Foreign Connected PACs, 2005-2006.csv"] = "2006"
pac$year[pac$year== "data/Foreign Connected PACs, 2007-2008.csv"] = "2008"
pac$year[pac$year== "data/Foreign Connected PACs, 2009-2010.csv"] = "2010"
pac$year[pac$year== "data/Foreign Connected PACs, 2011-2012.csv"] = "2012"
pac$year[pac$year== "data/Foreign Connected PACs, 2013-2014.csv"] = "2014"
pac$year[pac$year== "data/Foreign Connected PACs, 2015-2016.csv"] = "2016"
pac$year[pac$year== "data/Foreign Connected PACs, 2017-2018.csv"] = "2018"
pac$year[pac$year== "data/Foreign Connected PACs, 2019-2020.csv"] = "2020"
pac$year[pac$year== "data/Foreign Connected PACs, 2021-2022.csv"] = "2022" # Source: Geeks for Geeks (https://www.geeksforgeeks.org/replace-values-based-on-condition-in-r/)

pac$year |>
  unique()

# convert to integer
pac$year <- as.integer(pac$year) # Source: Geeks for Geeks (https://www.geeksforgeeks.org/convert-a-character-object-to-integer-in-r-programming-as-integer-function/)

pac |>
  glimpse()

# separate county/company of origin
pac <- pac |>
  separate(
  col = country_of_origin_parent_company, 
  sep = "/", 
  into = c("country_of_origin", "parent_company")
) # Source: rdr (Posit Forum)

# drop total donations
pac$total <- NULL

# dropping $
dems <- pac$dems
repubs <- pac$repubs

pac$dems <- gsub('[^[:alnum:] ]','', dems)
pac$repubs <- gsub('[^[:alnum:] ]','', repubs)

pac$dems <- as.double(pac$dems)
pac$repubs <- as.double(pac$repubs)

pac |>
  glimpse()

# rename party vars
names(pac)[names(pac) == "dems"] <- "Democrat"
names(pac)[names(pac) == "repubs"] <- "Republican" # Source: An Introduction to R for Research (https://bookdown.org/rwnahhas/IntroToR/rename.html)

# pivoting
pac <- pac |> 
  pivot_longer(
    cols = c(Democrat, Republican), 
    names_to = "party", 
    values_to = "amount"
  )

# summary table
country_total <- pac |>
  filter(country_of_origin == "UK") |>
  group_by(year, party) |>
  summarise(country_total = sum(amount, na.rm = TRUE))

print(country_total)
```

```{r q2 plotting}

# plot recreation
country_total |>
  ggplot(aes(x = year, y = country_total, color = party)) +
  geom_line(linewidth = 1) +
  labs(
    x = "Year",
    y = "Total amount",
    title = "Contributions to US political parties from UK-connected PACs",
    color = "Party",
    caption = "Source: OpenSecrets.org"
  ) +
  scale_y_continuous(labels = label_dollar(scale = 1/1000000, suffix = "M")) +
  scale_color_manual(values = c("blue", "red")) +
  theme(axis.title = element_text(hjust = 0),
        text = element_text(size = 11),
        legend.position = c(0.9, 0.15)
        )
  
# new plot (different country)
france_total <- pac |>
  filter(country_of_origin == "France") |>
  group_by(year, party) |>
  summarise(country_total = sum(amount, na.rm = TRUE))

france_total |>
  ggplot(aes(x = year, y = country_total, color = party)) +
  geom_line(linewidth = 1) +
  labs(
    x = "Year",
    y = "Total amount",
    title = "Contributions to US political parties from France-connected PACs",
    color = "Party",
    caption = "Source: OpenSecrets.org"
  ) +
  scale_y_continuous(labels = label_dollar(scale = 1/1000000, suffix = "M")) +
  scale_color_manual(values = c("blue", "red")) +
  theme(axis.title = element_text(hjust = 0),
        text = element_text(size = 11),
        legend.position = c(0.9, 0.15)
        )
```

While donations from France-connected PACs to U.S. political parties are significantly lower than UK-connected PACs (max \$1M from France vs. \~\$3.5M from UK), the above plot mirrors the partisan support trend seen in the UK plot: PACs connected to both these countries favor the Republican party, and for the most part, donations are increasing over time. Most significantly is the spike in donations to the Republican party just after 2015 (likely for the 2016 election), which could reflect companies' favoring of Trump's supposedly prosperous economic policies. This rationale would also make sense given the sharp drop in donations to the Republican party following Trump's election and the revelation to the world of his lack of substantive economic policies.

## 3 - Median housing prices in the US

```{r q3 plot 1}

# load in data
median_housing <- read_csv("data/median-housing.csv")
recessions <- read_csv("data/recessions.csv")

median_housing |>
  glimpse()

recessions |>
  glimpse()

names(median_housing)[names(median_housing) == "DATE"] <- "date"
names(median_housing)[names(median_housing) == "MSPUS"] <- "price"

median_housing |>
  glimpse()

# plot 1
median_housing |>
  ggplot(aes(x = date, y = price)) +
  geom_line(color = "royalblue", linewidth = 1) +
  labs(
    x = NULL,
    y = "Dollars",
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    caption = "Source: Census; HUD"
  ) +
    scale_x_date(date_breaks = "5 years", date_labels = "%Y") +
    scale_y_continuous(labels = scales::label_comma(), breaks = seq(0, 400000, by = 40000), limits = c(0, 400000)) +
    theme(plot.title.position = "plot",
          panel.grid.major.x = element_blank(), 
          panel.grid.minor.x = element_blank()
          )
```

```{r q3 plot 2}

# find extreme dates in median housing
arrange(median_housing, date) # Source: Geeks for Geeks (https://www.geeksforgeeks.org/how-to-sort-a-dataframe-in-r/)

median_housing |>
  slice_min(date) # 1963-01-01

median_housing |>
  slice_max(date) # 2021-04-01

# label recessions as true if fall between median housing dates
arrange(recessions, Peak)

recessions |>
  glimpse()

recessions <- recessions |>
 mutate(date_valid = if_else(Peak >= as.Date("1963-01-01", format = "%Y-%m-%d") & Trough <= as.Date("2021-04-01", format = "%Y-%m-%d"), 
                               TRUE,
                               FALSE))

# keep only true recessions
recessions_wrangle <- recessions |>
  filter(date_valid == TRUE)

median_housing |>
  ggplot(aes(x = date, y = price)) +
  geom_rect(
    data = recessions_wrangle,
    aes(
      xmin = as.Date(Peak), xmax = as.Date(Trough),
      ymin = -Inf, ymax = Inf,
      y = NULL,
      x = NULL
    ), 
    fill = "lightgray"
  ) +
  geom_line(color = "royalblue", linewidth = 1) +
  labs(
    x = NULL,
    y = "Dollars",
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    caption = "Shaded areas indicate U.S. recessions\nSource: Census; HUD"
  ) +
    scale_x_date(date_breaks = "5 years", date_labels = "%Y") +
    scale_y_continuous(labels = scales::label_comma(), breaks = seq(0, 400000, by = 40000), limits = c(0, 400000)) +
    theme(plot.title.position = "plot",
          panel.grid.major.x = element_blank(), 
          panel.grid.minor.x = element_blank()
          )
```

```{r q3 plot 3}

# identifying years and months
median_housing_wrangle <- data.frame(date = median_housing$date,
                 year = as.numeric(format(median_housing$date, format = "%Y")),
                 month = as.numeric(format(median_housing$date, format = "%m"))) # Source: Gavin Simpson (Stack Overflow)

median_housing_wrangle <- median_housing_wrangle |>
  left_join(median_housing) |>
  mutate(
      quarter = case_when(
        month %in% c(1, 2, 3) ~ "Q1",
        month %in% c(4, 5, 6) ~ "Q2",
        month %in% c(7, 8, 9) ~ "Q3",
        TRUE                  ~ "Q4"
        ),
      quarter = fct_relevel(quarter, "Q1", "Q2", "Q3", "Q4"),
      year_quarter = glue("{year} {quarter}")
  ) |>
  filter(year == 2019 | year == 2020) |>
  mutate(
      year_quarter = fct_relevel(year_quarter, "2019 Q1", "2019 Q2", "2019 Q3", "2019 Q4", "2020 Q1", "2020 Q2", "2020 Q3", "2020 Q4",)
  ) 
  
# make plot
median_housing_wrangle |>
  ggplot(aes(x = year_quarter, y = price, group = 1)) +
  geom_line(color = "royalblue", linewidth = 1) +
  labs(
    x = NULL,
    y = "Dollars",
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
  ) +
  geom_point(color = "royalblue", size = 2, shape = 21, fill = "white") + # Source: ggplot2 Reference (https://ggplot2.tidyverse.org/reference/aes_linetype_size_shape.html)
    scale_y_continuous(labels = scales::label_comma(), breaks = seq(300000, 360000, by = 20000)) +
      scale_x_discrete(labels = c("Q1", "Q2", "Q3", "Q4", "Q1", "Q2", "Q3", "Q4")) +
  annotate(
    geom = "text",
    x = c("2019 Q2", "2020 Q2"),
    y = 285000,
    label = c("               2019", "               2020"),
    size = 4
  ) +
    theme(plot.title.position = "plot",
          axis.text.x = element_text(color = "black", size = 8),
          plot.margin = unit(c(1, 1, 2, 1), "lines")

) +
    coord_cartesian(ylim = c(300000, 360000), clip = "off")
```

## 4 - Expect More. Plot More.

```{r q4}

q4data1 <- tribble(
  ~x,  ~y,
  50,  50
)

q4data1 |>
  ggplot() +
  geom_point(
    aes(x = x, y = y),
    color = "#E80018", # Source: Scheme Color (https://www.schemecolor.com/target-red-logo-color.php#google_vignette)
    size = 60
  ) +
    geom_point(
    aes(x = x, y = y),
    color = "#FFFFFF", # Source: Scheme Color (https://www.schemecolor.com/target-red-logo-color.php#google_vignette)
    size = 40
  ) +
    geom_point(
    aes(x = x, y = y),
    color = "#E80018", # Source: Scheme Color (https://www.schemecolor.com/target-red-logo-color.php#google_vignette)
    size = 20
    ) +
  annotate(
    geom = "text",
    x = 50,
    y = 20,
    label = "TARGET   ",
    size = 7,
    color = "#E80018",
    fontface = "bold"
  ) +
    annotate(
    geom = "text",
    x = 58.25,
    y = 18,
    label = "◯",  #Source: Alan Wood Unicode Resources (https://www.alanwood.net/unicode/geometric_shapes.html)
    size = 5,
    color = "#E80018"
  ) +
    annotate(
    geom = "text",
    x = 58.25,
    y = 17.5,
    label = "R",
    size = 2.5,
    color = "#E80018"
  ) +
  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +
  theme_void()
```

The primary approach I adopted was beginning with the bullseye part of the logo, which I toyed around with using annotations of circles in text geoms, but then realized I could accomplish the same goal much easier by using `geom_point()` mapped to a single point, 50, 50. I created three overlayed circles, a large red one, a smaller white one, and a smaller red one. I then used text annotations to accomplish the "Target" text as well as a text "R" and unicode circle to create the registered trademark icon.

## 5 - Mirror, mirror on the wall, who’s the ugliest of them all?

```{r q5 defaults}

penguins |>
  glimpse()

# default plot
penguins |>
  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = sex)) +
  geom_point() +
  labs(
    x = "Body mass (g)",
    y = "Flipper length (mm)",
    title = "Penguin flipper length increases with body mass",
    subtitle = "By sex",
    color = "Sex"
  ) +
  theme(
    plot.title.position = "plot"
  )
```

```{r q5 ugly}

# ugly plot
penguins |>
  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = sex)) +
  geom_point(size = 10, shape = 13) +
  labs(
    x = "Body mass (g)",
    y = "Flipper length (mm)",
    title = "Penguin \nflipper length \nincreases \nwith body \nmass",
    color = "S\ne\nx"
  ) +
  theme(
    axis.title.x = element_text(
      color = "orangered1", 
      size = 15, 
      angle = 3, 
      face = "italic"),
    axis.title.y = element_text(
      color = "pink", 
      size = 17, 
      face = "bold", 
      angle = 94),
    title = element_text(
      color = "royalblue3", 
      size = 8, 
      angle = 2),
    panel.grid.major.x = element_line(
      color = "yellow", 
      linewidth = 3),
    panel.grid.major.y = element_line(
      color = "violet", 
      linewidth = 9),
    legend.title = element_text(
      color = "red", 
      size = 80, 
      face = "bold", 
      angle = 0),
    legend.background = element_rect(
      fill = "darkgray", 
      color = "palegreen2"),
    panel.background = element_rect(
      fill = "cyan", 
      color = "deeppink3"),
    legend.position = c(.9, .5),
  ) +
    scale_x_continuous(
      breaks = c(1254.6, 2874.65, 3050, 3010, 4152, 4896, 5369, 5579, 6000)
      ) +
    scale_y_continuous(
      breaks = c(100, 180, 182, 190, 230)
      ) +
    scale_color_manual(
      values = c("male" = "maroon3", "female" = "magenta")
      ) +
    coord_cartesian(
      xlim = c(1000, 6000), 
      ylim = c(100, 300), 
      clip = "off")

# Color source: R color cheatsheet (https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf)
```
